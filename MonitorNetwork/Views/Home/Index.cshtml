@model MonitorNetwork.Models.NetworkModel
@{
    ViewBag.Title = "Home Page";

}
@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.2.8/cytoscape.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.min.js"></script>
    <script src="https://cdn.rawgit.com/cytoscape/cytoscape.js-qtip/2.7.0/cytoscape-qtip.js"></script>
    <script src="~/Scripts/cytoscape.config.js"></script>
    <script src="~/Scripts/algorithm.js"></script>
}


<div id="cy" style=" z-index: 0; overflow: hidden; width: 800px; height: 700px; margin: 0 auto; "></div>

<script>

    @{
        string connections = Newtonsoft.Json.JsonConvert.SerializeObject(Model.connections);
        string relays = Newtonsoft.Json.JsonConvert.SerializeObject(Model.relays);
        string stores = Newtonsoft.Json.JsonConvert.SerializeObject(Model.stores);
        string nodes = Newtonsoft.Json.JsonConvert.SerializeObject(Model.cytoscapeNodes);
        string edges = Newtonsoft.Json.JsonConvert.SerializeObject(Model.cytoscapeEdges);
    }
    var connections = @Html.Raw(connections);
    var relays = @Html.Raw(relays);
    var stores = @Html.Raw(stores);

    var cytoscapeNodes = @Html.Raw(nodes);
    var cytoscapeEdges = @Html.Raw(edges);

    var processingCenterId = relays.find(function (relay) {
        return relay.isProcessingCenter;
    });

    //var nodeQueues = [{ id: "r1", queue: [{ transactionId: 100001, toProcCenter = true, storeId: "s1" }] }];
    var nodeQueues = [];

    function constructNodeQueues() {
        relays.forEach(function (relay) {
            nodeQueues.push({ id: "r" + relay.relayID, queue: [] });
        });

        stores.forEach(function (store) {
            nodeQueues.push({ id: "s" + store.storeID, queue: [] });
        });
    }

    constructNodeQueues();

    var funcMoveTransactions;

    function moveTransactions() {
        return new Promise(function (resolve, reject) {

            while (!nodeQueuesEmpty()) {
                nodeQueues.forEach(function (nodeQueue) {
                    if (nodeQueue.queue.length > 0) {
                        var transactionToMove = nodeQueue.queue.shift();
                        var path;
                        if (transactionToMove.toProcCenter) {
                            path = startPath(nodeQueue.id, processingCenterId, true);
                        } else {
                            path = startPath(nodeQueue.id, transactionToMove.storeId, false);
                        }
                        // TODO: extra logic to condense path info to just next element not whole path.
                        hightlightNextEle(path);
                    }
                });
            }
        });
    }

    function nodeQueuesEmpty() {
        return nodeQueues.every(function (nodeQueue) {
            return nodeQueue.queue.length == 0;
        });
    }
    
    function addTransaction(transactionId, storeId) {
        var transaction = { transactionId: transactionId, toProcCenter: true, storeId: storeId };

        var store = nodeQueues.find(function (nodeQueue) {
            return nodeQueue.id == "s" + storeId;
        });

        store.queue.push(transaction);

        funcMoveTransactions = moveTransactions();
    }

</script>

<div id="transactions">
    @Html.Partial("_TransactionPartial", Model.transactions)
</div>